#!/bin/bash

# Version bump script for dev-workspace-docker-image
# Usage: ./scripts/bump-version [major|minor|patch]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    echo -e "${1}${2}${NC}"
}

# Function to get current version from makefile
get_current_version() {
    grep "IMAGE_TAG :=" makefile | sed 's/.*generic-\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/'
}

# Function to bump version
bump_version() {
    local current_version="$1"
    local bump_type="$2"

    # Split version into parts
    IFS='.' read -r major minor patch <<< "$current_version"

    case "$bump_type" in
        "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        "minor")
            minor=$((minor + 1))
            patch=0
            ;;
        "patch")
            patch=$((patch + 1))
            ;;
        *)
            print_color "$RED" "Error: Invalid bump type '$bump_type'. Use major, minor, or patch."
            exit 1
            ;;
    esac

    echo "${major}.${minor}.${patch}"
}

# Function to update version in files
update_version() {
    local old_version="$1"
    local new_version="$2"

    print_color "$BLUE" "Updating version from $old_version to $new_version..."

    # Update makefile
    sed -i.bak "s/generic-${old_version}/generic-${new_version}/g" makefile
    print_color "$GREEN" "âœ“ Updated makefile"

    # Update Dockerfile
    sed -i.bak "s/DEV_WORKSPACE_VERSION=${old_version}/DEV_WORKSPACE_VERSION=${new_version}/g" Dockerfile
    print_color "$GREEN" "âœ“ Updated Dockerfile"

    # Update compose.yaml
    sed -i.bak "s/generic-${old_version}/generic-${new_version}/g" compose.yaml
    print_color "$GREEN" "âœ“ Updated compose.yaml"

    # Clean up backup files
    rm -f makefile.bak Dockerfile.bak compose.yaml.bak

    print_color "$GREEN" "âœ“ Version updated successfully!"
}

# Function to add changelog entry
add_changelog_entry() {
    local new_version="$1"
    local bump_type="$2"
    local today=$(date '+%d %B, %Y')

    print_color "$BLUE" "Adding changelog entry for version $new_version..."

    # Create temporary file with new changelog entry
    cat > changelog_temp.md << EOF
# Changelog

## [${new_version}] ${today}

- **Release**: ${bump_type} version bump

EOF

    # Append existing changelog content (skip the first line "# Changelog")
    tail -n +2 CHANGELOG.md >> changelog_temp.md

    # Replace original changelog
    mv changelog_temp.md CHANGELOG.md

    print_color "$GREEN" "âœ“ Added changelog entry"
}

# Main script logic
main() {
    local bump_type="${1:-patch}"

    # Validate bump type
    if [[ ! "$bump_type" =~ ^(major|minor|patch)$ ]]; then
        print_color "$RED" "Error: Invalid bump type '$bump_type'"
        print_color "$YELLOW" "Usage: $0 [major|minor|patch]"
        print_color "$YELLOW" "Default: patch"
        exit 1
    fi

    # Get current version
    local current_version
    current_version=$(get_current_version)

    if [[ -z "$current_version" ]]; then
        print_color "$RED" "Error: Could not determine current version from makefile"
        exit 1
    fi

    print_color "$BLUE" "Current version: $current_version"

    # Calculate new version
    local new_version
    new_version=$(bump_version "$current_version" "$bump_type")

    print_color "$BLUE" "New version: $new_version"

    # Confirm before proceeding
    print_color "$YELLOW" "Do you want to bump version from $current_version to $new_version? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        print_color "$YELLOW" "Version bump cancelled."
        exit 0
    fi

    # Update files
    update_version "$current_version" "$new_version"

    # Add changelog entry
    add_changelog_entry "$new_version" "$bump_type"

    print_color "$GREEN" "ðŸŽ‰ Version bump completed successfully!"
}

# Run main function with all arguments
main "$@"
