#!/usr/bin/env bash

# Script to build a plugin and create a zip file from source code.

start_time=$(date +%s)

script_version="1.4.2"

command=${1}
source_path=$(pwd)
dist_path="${source_path}/dist"
cols=$(( ${#TERM} ? $(tput cols) : 80 ))

plugin_name=$(./pname ${source_path})
plugin_slug=$(./pslug ${source_path})
plugin_folder=$(./pfolder ${source_path})
plugin_version=$(./pversion ${source_path})
tmp_build_dir="${dist_path}/${plugin_folder}"
tmp_internal_vendor_dir="${tmp_build_dir}/lib/"

#######################################
# Echo the string as an step in the output.
# Arguments:
#   The message to display.
# Outputs:
#   The passed string after an arrow.
#######################################
echo_step() {
    echo "▶ ${1}"
}

#######################################
# Delete the temporary plugin folder in the dist dir.
# Globals:
#   plugin_name
#   tmp_build_dir
# Outputs:
#   The current step message.
#######################################
clean_dist() {
    echo_step "Removing the folder ${tmp_build_dir} if exists"
    rm -rf "${tmp_build_dir}" "${tmp_build_dir}-tmp" || return 1
}

#######################################
# Build the plugin code to a subdir named
# as the plugin name in the dist dir.
# Globals:
#   tmp_build_dir
#   source_path
# Outputs:
#   Step messages.
#######################################
build_to_dir() {
    clean_dist

    echo_step "Copying plugin files to the dist dir filtering the files listed on .rsync-filters-pre-build"
    mkdir -p "${tmp_build_dir}" || return 1
    rsync -r -f 'merge .rsync-filters-pre-build' "${source_path}/" "${tmp_build_dir}" || return 1000

    # Step needed for the plugins, to update the free-plugin-alias in the vendor dir
    echo_step "Updating dependencies on /vendor./"
    echo ""
    composer update --lock --working-dir="${tmp_build_dir}" || return 1001
    composer install --no-dev --working-dir="${tmp_build_dir}" || return 1002

    echo_step "Dumping Composer autoload on /lib/vendor"
    echo ""
    composer dumpautoload -o --working-dir="${tmp_internal_vendor_dir}" || return 1003

    echo_step "Removing files listed on .rsync-filters-post-build"
    rsync -r -f 'merge .rsync-filters-post-build' "${tmp_build_dir}/" "${tmp_build_dir}-tmp" || return 1004
    rm -rf "${tmp_build_dir}" || return 1005
    mv "${tmp_build_dir}-tmp" "${tmp_build_dir}" || return 1006

    echo ""
}

#######################################
# Build the plugin code to a subdir named
# as the plugin name in the dist dir and
# pack the folder in a zip file stored
# in the dist dir, by default.
# Globals:
#   dist_path
#   plugin_name
#   plugin_version
# Outputs:
#   Step messages.
#######################################
pack_built_dir() {
    zip_filename=$(pzipfile ${source_path})
    zip_path="${dist_path}/${zip_filename}"
    echo_step "Removing old zip file, if exists"
    rm -f "${zip_path}" || return 1
    pushd "${dist_path}" >/dev/null 2>&1 || return 2
    echo_step "Creating the zip file on dist/${zip_filename}"
    zip -qr "${zip_path}" ./${plugin_folder} || return 3
    popd >/dev/null 2>&1 || return 4
}

#######################################
# Show the elapsed time since the script started.
# Globals:
#   start_time
# Outputs:
#   The runtime in seconds.
#######################################
show_time() {
    if [ "${HIDE_HEADER}" != "1" ]; then
        end_time=$(date +%s)
        runtime=$((end_time - start_time))
        echo ""
        echo "Runtime $runtime sec"
    fi
}

#######################################
# Repeats a string "n" times.
# Arguments:
#   The string to be repeated.
#   The number of times to repeat.
# Outputs:
#   The repeated string.
#######################################
repeat() {
    local string="$1"
    local times="${2:-1}"  # Use the second argument or set a default value of 1

    for ((c = 1; c <= times; c++)); do
        echo -n "$string"
    done
}

echo_box_line() {
    local start_char=$1
    local content=$2
    local fill_char=$3
    local end_char=$4

    # Example: Calculate the width of the box (80 characters wide)
    local width=$cols

    # Calculate the number of fill characters needed
    local fill_length=$(( $width - ${#start_char} - ${#content} - ${#end_char}))
    local fill=$(printf "%0.s$fill_char" $(seq 1 $fill_length))

    # Output the line
    echo "${start_char}${content}${fill}${end_char}"
}

#######################################
# Show the header for the script, showing
# a few details of the plugin.
# Globals:
#   script_version
#   plugin_name
#   plugin_version
#   plugin_slug
# Outputs:
#   The formatted header.
#######################################
echo_header() {
    echo_box_line "╔" "" "═" "╗"
    echo_box_line "║" "      __        PUBLISHPRESS PLUGIN BUILDER - v${script_version}" " " "║"
    echo_box_line "║" "   -=(o '.      " "─" "║"
    echo_box_line "║" "     '.-.\      Name: ${plugin_name}" " " "║"
    echo_box_line "║" "     /|  \\\     Slug: ${plugin_slug}" " " "║"
    echo_box_line "║" "     '|  ||     Folder: ${plugin_folder}" " " "║"
    echo_box_line "║" "      _\_):,_   Version: ${plugin_version}" " " "║"
    echo_box_line "║" "" " " "║"
    echo_box_line "╚" "" "═" "╝"
    echo ""
}

# Function to display help text
print_help() {
    echo "Usage: $0 [command]"
    echo "Commands:"
    echo "  build-dir    Build the plugin to the dist directory."
    echo "  build        Build the plugin and create a zip file."
    echo "  clean        Clean the dist directory."
    echo "  version      Get the plugin version."
    echo ""
    echo "Options:"
    echo "  -h, --help   Show this help message."
    echo "  HIDE_HEADER  Set this environment variable to '1' to hide the header when running the script."
    echo "               HIDE_HEADER=1 pbuild build"
}

# Check if user wants to see help or no command is provided
if [[ $1 == "-h" || $1 == "--help" || -z "$1" ]]; then
    echo_header
    echo ""
    print_help
    exit 0
fi

if [ "${HIDE_HEADER}" != "1" ]; then
    echo_header
fi

echo_command_header() {
    echo "🚀" " ${1}"
    echo ""
}

echo_success() {
    echo ""
    echo "✅" " ${1}"
}

echo_error() {
    echo ""
    echo "❌" " ${1}"
}

echo_separator() {
    repeat "─" $cols
    echo ""
}

run_commands() {
    all_success=true

    for passed_command in "$@"; do
        echo_command_header "Running command: ${passed_command}"

        # Execute the command
        eval "${passed_command}"

        # Check the exit status of the command
        if [ $? -ne 0 ]; then
            # If the exit status is not 0, set the flag to false
            all_success=false

            # Show the error message
            echo_error "Command failed: ${passed_command}"

            # Break out of the loop (optional, if you want to stop executing further commands on failure)
            break
        fi

        echo_success "Command successfully executed: ${passed_command}"
        echo_separator
    done

    # Display a message based on whether all commands were successful or not
    if $all_success ; then
        # echo positive emoji
        echo "🎉" " Executed successfully!"
    fi
}

case "${command}" in
"build-dir")
    run_commands "clean_dist" "build_to_dir"
    show_time
    ;;
"build")
    run_commands "clean_dist" "build_to_dir" "pack_built_dir"
    show_time
    ;;
"clean")
    run_commands "clean_dist"
    ;;
"version")
    echo "${plugin_version}" > version.txt
    ;;
*)
    echo "invalid option ${command}"
    ;;
esac
